#. AppSettings.json:-
---------------------------
{
	"ConnectionStrings": {
		"dbcs": "Server=xxxxxxxxx;Database=xxxxxxxxx;User ID=yyyyyyy;Password=xxxxxxxx;TrustServerCertificate=True;"
	},
	"Logging": {
		"LogLevel": {
			"Default": "Information",
			"Microsoft.AspNetCore": "Warning"
		}
	},
	"AllowedHosts": "*"
}

-------------------------------------------------
#. Program.cs:-
using FerreroCronjobServices.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;

namespace FerreroCronjobServices
{
    public class Program
    {
        private static IServiceProvider _serviceProvider;

        static async Task Main(string[] args)
        {
            // Build configuration
            var configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
                .Build();

            // Set up dependency injection
            var serviceCollection = new ServiceCollection();
            ConfigureServices(serviceCollection, configuration);
            _serviceProvider = serviceCollection.BuildServiceProvider();

            var cancellationTokenSource = new CancellationTokenSource();
            Console.CancelKeyPress += (sender, eventArgs) => {
                eventArgs.Cancel = true;
                cancellationTokenSource.Cancel();
            };

            var deleteOldRecordsService = _serviceProvider.GetRequiredService<DeleteOldRecordsService>();
            await deleteOldRecordsService.ExecuteAsync(cancellationTokenSource.Token);
        }

        private static void ConfigureServices(ServiceCollection services, IConfiguration configuration)
        {
            // Configure logging
            services.AddLogging(configure => configure.AddConsole());

            // Register DbContext with connection string from appsettings.json
            string connectionString = configuration.GetConnectionString("dbcs");
            services.AddDbContext<dbFerreroIOTContext>(options => options.UseSqlServer(connectionString));

            // Register DeleteOldRecordsService as singleton
            services.AddSingleton<DeleteOldRecordsService>();

            // Add configuration as a service if needed elsewhere
            services.AddSingleton(configuration);
        }
    }

    public class DeleteOldRecordsService
    {
        private readonly IServiceScopeFactory _serviceScopeFactory;
        private readonly ILogger<DeleteOldRecordsService> _logger;

        public DeleteOldRecordsService(IServiceScopeFactory serviceScopeFactory, ILogger<DeleteOldRecordsService> logger)
        {
            _serviceScopeFactory = serviceScopeFactory;
            _logger = logger;
        }

        public async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            while (!stoppingToken.IsCancellationRequested)
            {
                var now = DateTime.Now;

                if (now.Hour == 0 && now.Minute == 0)
                {
                    using (var scope = _serviceScopeFactory.CreateScope())
                    {
                        var dbContext = scope.ServiceProvider.GetRequiredService<dbFerreroIOTContext>();

                        try
                        {
                            var dateThreshold = DateTime.Now.AddMonths(-3);

                            var recordsToDelete = dbContext.DeviceTransactions
                                .Where(record => record.Tdate < dateThreshold);

                            dbContext.DeviceTransactions.RemoveRange(recordsToDelete);
                            await dbContext.SaveChangesAsync();

                            _logger.LogInformation("Old records deleted successfully at Night.");
                        }
                        catch (Exception ex)
                        {
                            _logger.LogError($"Error in deleting old records: {ex.Message}");
                        }
                    }

                    await Task.Delay(TimeSpan.FromHours(24), stoppingToken);
                }
                else
                {
                    await Task.Delay(TimeSpan.FromMinutes(1), stoppingToken);
                }
            }
        }
    }
}
